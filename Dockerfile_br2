FROM sw-nexus:9001/ubuntu22-jdk11
#ENV LANG='el_GR.UTF-8' LANGUAGE='el_GR:UTF-8' LC_ALL='el_GR.UTF-8'
RUN apt-get update && apt-get install -y apt nmap locales vim wget gpg gpg-agent libaio1 xmlstarlet jq ca-certificates gettext-base procps dumb-init \
  && \
  rm -rf /var/lib/apt/lists/*
RUN locale-gen 'el_GR.UTF-8'
RUN update-locale LANG='el_GR.UTF-8'

ARG ACTIVEMQ_DISTRIBUTION_URL=$ACTIVEMQ_LOCAL_URL
ENV ACTIVEMQ_ARTEMIS_VERSION=2.25.0
ENV INSTANCE_HOME=/opt/messaging/artemis
ENV INSTANCE_ETC=/opt/messaging/artemis/etc
ENV USER=generaliMessaging  
ENV USER_PASS=TY587xrMwcUICohd10Cn
  
  
 
# Uncompress and validate
WORKDIR /opt
RUN mkdir -p "${INSTANCE_HOME}"

RUN if (echo "${ACTIVEMQ_DISTRIBUTION_URL}" | grep -Eq  ".zip\$" ) ; \
    then \
      mkdir tmp && \
      wget "${ACTIVEMQ_DISTRIBUTION_URL}" -P tmp/ && \
      unzip -d tmp -q "tmp/*.zip" && rm -f tmp/*.zip && ls -l tmp/ && \
        mv tmp/* ./apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION} && \
        ln -s "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}" "/opt/apache-artemis" && \
        rmdir tmp; \
    elif test -n "${ACTIVEMQ_DISTRIBUTION_URL}" ; \
    then \
      echo "Only .zip format is supported when using ACTIVEMQ_DISTRIBUTION_URL" && \
      exit 2; \
    else \
      #var=$(curl -v --silent https://activemq.apache.org/components/artemis/download/ 2>&1 | grep "ActiveMQ Artemis") \
      #var1=$(echo var | awk -F '>' '{print $12}') \
      #var2=$(echo $var1 | awk -F ' ' '{print $3}') \
      #ACTIVEMQ_ARTEMIS_VERSION=$(cat $var2) \
      wget "https://archive.apache.org/dist/activemq/activemq-artemis/${ACTIVEMQ_ARTEMIS_VERSION}/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz" && \
      wget "https://archive.apache.org/dist/activemq/activemq-artemis/${ACTIVEMQ_ARTEMIS_VERSION}/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc" && \
      wget "https://downloads.apache.org/activemq/KEYS" && \
      gpg --no-tty --import "KEYS" && \
      gpg --no-tty "apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc" && \
      tar xfz "apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz" && \
      ln -s "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}" "/opt/apache-artemis" && \
      rm -f "apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz" "KEYS" "apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc"; \
    fi


RUN "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/bin/artemis" create "${INSTANCE_HOME}" \        
        --encoding UTF8 \
        --http-host 0.0.0.0 \
        --role amq \
        --user ${USER} \
        --password ${USER_PASS} \                
        --relax-jolokia \
        --require-login;
      
WORKDIR ${INSTANCE_ETC}
 
# Log to tty to enable docker logs container-name
RUN sed -i "s/logger.handlers=.*/logger.handlers=CONSOLE/g" ${INSTANCE_ETC}/logging.properties

# --java-options doesn't seem to work across the board on all versions adding them manually ##~!! its not compatible with jdk 11
RUN sed -i "s/JAVA_ARGS=\"/JAVA_ARGS=\"-Djava.net.preferIPv4Stack=true -Dsun.jnu.encoding=UTF-8 -Dfile.encoding=UTF-8 -Xms2G -Xmx8G /g" ${INSTANCE_ETC}/artemis.profile
 
# Ports are only exposed with an explicit argument, there is no need to binding
# the web console to localhost
RUN xmlstarlet ed -L -N amq="http://activemq.org/schema" \
    -u "/amq:broker/amq:web/@bind" \
    -v "http://0.0.0.0:8161" ${INSTANCE_ETC}/bootstrap.xml
 
# In a similar fashion the jolokia access is restricted to localhost only. Disabling
# this as in the natural environmnets for the image like Kubernetes this is problematic.
RUN if (echo "${ACTIVEMQ_ARTEMIS_VERSION}" | grep -Eq  "(2.[^0-3]\\.[0-9]|[^1-2]\\.[0-9]\\.[0-9]+)" ) ; then xmlstarlet ed --inplace --subnode "/restrict" --type elem -n "remote" ${INSTANCE_ETC}/jolokia-access.xml && xmlstarlet ed --inplace --subnode "/restrict/remote" --type elem -n host -v "0.0.0.0/0" ${INSTANCE_ETC}/jolokia-access.xml; fi
 
# Remove default values for memory in artemis profile in order to let the automatic
# Java ergonomics detection work https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html
#RUN sed -i "s/-Xm[xs][^ \"]*//g" ../etc/artemis.profile
 
# For the casual run of the image make the docker-entrypoint-sh think
# that the performance journal calibration is already completed
RUN if (echo "${ACTIVEMQ_ARTEMIS_VERSION}" | grep -Eq  "(1.5\\.[3-5]|[^1]\\.[0-9]\\.[0-9]+)" ) ; then touch ${INSTANCE_HOME}/data/.perf-journal-completed; fi
 
# add user and group for artemis
#RUN groupadd -g 1000 -r artemis && useradd -r -u 1000 -g artemis artemis 
#RUN chown -R artemis. "${INSTANCE_HOME}"
#RUN chmod -R 755 "${INSTANCE_HOME}"
 

 
# Web Server
EXPOSE 8161
 
# JMX Exporter
EXPOSE 9404
 
# Port for CORE,MQTT,AMQP,HORNETQ,STOMP,OPENWIRE
EXPOSE 61616

 
# Port for HORNETQ,STOMP
EXPOSE 5445
 
# Port for AMQP
EXPOSE 5672
 
## Port for MQTT
EXPOSE 1883
 
##Port for STOMP
EXPOSE 61613

 
WORKDIR ${INSTANCE_HOME}/bin 
#USER artemis 
RUN mkdir -p ${INSTANCE_HOME}/lock 
#RUN mkdir -p ${INSTANCE_HOME}/etc-override
ADD  assets/broker_2.xml ${INSTANCE_ETC}/broker.xml
 
# Expose some outstanding folders
#VOLUME ["${INSTANCE_HOME}/data"]
#VOLUME ["${INSTANCE_HOME}/tmp"]
#VOLUME ["${INSTANCE_HOME}/etc"]
#VOLUME ["${INSTANCE_HOME}/etc-override"]
#VOLUME ["${INSTANCE_HOME}/lock"]
#VOLUME ["/opt/jmx-exporter/etc-override"]
 
COPY assets/docker-entrypoint.sh /
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["artemis-server"]